// Generated by jextract

package com.github.fullstorydev.grpcurl;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

public class _GoString_ {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("p"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("n")
    );
    public static MemoryLayout $LAYOUT() {
        return _GoString_.$struct$LAYOUT;
    }
    static final VarHandle p$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("p"));
    public static VarHandle p$VH() {
        return _GoString_.p$VH;
    }
    public static MemoryAddress p$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GoString_.p$VH.get(seg);
    }
    public static void p$set( MemorySegment seg, MemoryAddress x) {
        _GoString_.p$VH.set(seg, x);
    }
    public static MemoryAddress p$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GoString_.p$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void p$set(MemorySegment seg, long index, MemoryAddress x) {
        _GoString_.p$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle n$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("n"));
    public static VarHandle n$VH() {
        return _GoString_.n$VH;
    }
    public static long n$get(MemorySegment seg) {
        return (long)_GoString_.n$VH.get(seg);
    }
    public static void n$set( MemorySegment seg, long x) {
        _GoString_.n$VH.set(seg, x);
    }
    public static long n$get(MemorySegment seg, long index) {
        return (long)_GoString_.n$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void n$set(MemorySegment seg, long index, long x) {
        _GoString_.n$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


