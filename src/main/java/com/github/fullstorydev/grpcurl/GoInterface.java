// Generated by jextract

package com.github.fullstorydev.grpcurl;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

public class GoInterface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("t"),
        Constants$root.C_POINTER$LAYOUT.withName("v")
    );
    public static MemoryLayout $LAYOUT() {
        return GoInterface.$struct$LAYOUT;
    }
    static final VarHandle t$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("t"));
    public static VarHandle t$VH() {
        return GoInterface.t$VH;
    }
    public static MemoryAddress t$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)GoInterface.t$VH.get(seg);
    }
    public static void t$set( MemorySegment seg, MemoryAddress x) {
        GoInterface.t$VH.set(seg, x);
    }
    public static MemoryAddress t$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)GoInterface.t$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void t$set(MemorySegment seg, long index, MemoryAddress x) {
        GoInterface.t$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle v$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("v"));
    public static VarHandle v$VH() {
        return GoInterface.v$VH;
    }
    public static MemoryAddress v$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)GoInterface.v$VH.get(seg);
    }
    public static void v$set( MemorySegment seg, MemoryAddress x) {
        GoInterface.v$VH.set(seg, x);
    }
    public static MemoryAddress v$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)GoInterface.v$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void v$set(MemorySegment seg, long index, MemoryAddress x) {
        GoInterface.v$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


